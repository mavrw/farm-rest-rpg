// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: item_type.sql

package repository

import (
	"context"
)

const createItemType = `-- name: CreateItemType :one
INSERT INTO "item_type" (id, name)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
RETURNING id, name
`

type CreateItemTypeParams struct {
	ID   int32
	Name string
}

func (q *Queries) CreateItemType(ctx context.Context, arg CreateItemTypeParams) (ItemType, error) {
	row := q.db.QueryRow(ctx, createItemType, arg.ID, arg.Name)
	var i ItemType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getAllItemTypes = `-- name: GetAllItemTypes :many
SELECT id, name 
FROM "item_type"
ORDER BY id
`

func (q *Queries) GetAllItemTypes(ctx context.Context) ([]ItemType, error) {
	rows, err := q.db.Query(ctx, getAllItemTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ItemType
	for rows.Next() {
		var i ItemType
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemTypeByID = `-- name: GetItemTypeByID :one
SELECT id, name
FROM "item_type"
WHERE id = $1
`

func (q *Queries) GetItemTypeByID(ctx context.Context, id int32) (ItemType, error) {
	row := q.db.QueryRow(ctx, getItemTypeByID, id)
	var i ItemType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
