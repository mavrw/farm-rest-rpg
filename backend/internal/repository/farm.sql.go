// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: farm.sql

package repository

import (
	"context"
)

const createFarm = `-- name: CreateFarm :one
INSERT INTO "farm" (user_id, name)
VALUES ($1, $2)
RETURNING id, user_id, name, created_at, updated_at
`

type CreateFarmParams struct {
	UserID int32
	Name   string
}

func (q *Queries) CreateFarm(ctx context.Context, arg CreateFarmParams) (Farm, error) {
	row := q.db.QueryRow(ctx, createFarm, arg.UserID, arg.Name)
	var i Farm
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFarmByID = `-- name: GetFarmByID :one
SELECT id, user_id, name, created_at, updated_at
FROM "farm"
WHERE id = $1
`

func (q *Queries) GetFarmByID(ctx context.Context, id int32) (Farm, error) {
	row := q.db.QueryRow(ctx, getFarmByID, id)
	var i Farm
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFarmByUserID = `-- name: GetFarmByUserID :one
SELECT id, user_id, name, created_at, updated_at
FROM "farm"
WHERE user_id = $1
`

func (q *Queries) GetFarmByUserID(ctx context.Context, userID int32) (Farm, error) {
	row := q.db.QueryRow(ctx, getFarmByUserID, userID)
	var i Farm
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
