// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: currency_type.sql

package repository

import (
	"context"
)

const createCurrencyType = `-- name: CreateCurrencyType :one
INSERT INTO "currency_type" (id, name)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
RETURNING id, name
`

type CreateCurrencyTypeParams struct {
	ID   int32
	Name string
}

func (q *Queries) CreateCurrencyType(ctx context.Context, arg CreateCurrencyTypeParams) (CurrencyType, error) {
	row := q.db.QueryRow(ctx, createCurrencyType, arg.ID, arg.Name)
	var i CurrencyType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getAllCurrencyTypes = `-- name: GetAllCurrencyTypes :many
SELECT id, name 
FROM "currency_type"
ORDER BY id
`

func (q *Queries) GetAllCurrencyTypes(ctx context.Context) ([]CurrencyType, error) {
	rows, err := q.db.Query(ctx, getAllCurrencyTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CurrencyType
	for rows.Next() {
		var i CurrencyType
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCurrencyTypeByID = `-- name: GetCurrencyTypeByID :one
SELECT id, name
FROM "currency_type"
WHERE id = $1
`

func (q *Queries) GetCurrencyTypeByID(ctx context.Context, id int32) (CurrencyType, error) {
	row := q.db.QueryRow(ctx, getCurrencyTypeByID, id)
	var i CurrencyType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
