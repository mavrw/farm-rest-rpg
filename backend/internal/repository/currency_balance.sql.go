// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: currency_balance.sql

package repository

import (
	"context"
)

const adjustUserCurrencyBalanceByType = `-- name: AdjustUserCurrencyBalanceByType :one
UPDATE "currency_balance"
SET balance = balance + $2
WHERE user_id = $1 AND currency_type_id = $3
RETURNING id, user_id, currency_type_id, balance
`

type AdjustUserCurrencyBalanceByTypeParams struct {
	UserID         int32
	Balance        int32
	CurrencyTypeID int32
}

func (q *Queries) AdjustUserCurrencyBalanceByType(ctx context.Context, arg AdjustUserCurrencyBalanceByTypeParams) (CurrencyBalance, error) {
	row := q.db.QueryRow(ctx, adjustUserCurrencyBalanceByType, arg.UserID, arg.Balance, arg.CurrencyTypeID)
	var i CurrencyBalance
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CurrencyTypeID,
		&i.Balance,
	)
	return i, err
}

const createCurrencyBalance = `-- name: CreateCurrencyBalance :one
INSERT INTO "currency_balance" (user_id, currency_type_id, balance)
VALUES ($1, $2, $3)
RETURNING id, user_id, currency_type_id, balance
`

type CreateCurrencyBalanceParams struct {
	UserID         int32
	CurrencyTypeID int32
	Balance        int32
}

func (q *Queries) CreateCurrencyBalance(ctx context.Context, arg CreateCurrencyBalanceParams) (CurrencyBalance, error) {
	row := q.db.QueryRow(ctx, createCurrencyBalance, arg.UserID, arg.CurrencyTypeID, arg.Balance)
	var i CurrencyBalance
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CurrencyTypeID,
		&i.Balance,
	)
	return i, err
}

const deleteCurrencyBalance = `-- name: DeleteCurrencyBalance :exec
DELETE FROM "currency_balance"
WHERE id = $1
`

func (q *Queries) DeleteCurrencyBalance(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCurrencyBalance, id)
	return err
}

const getCurrencyBalance = `-- name: GetCurrencyBalance :one
SELECT id, user_id, currency_type_id, balance
FROM "currency_balance"
WHERE id = $1
`

func (q *Queries) GetCurrencyBalance(ctx context.Context, id int32) (CurrencyBalance, error) {
	row := q.db.QueryRow(ctx, getCurrencyBalance, id)
	var i CurrencyBalance
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CurrencyTypeID,
		&i.Balance,
	)
	return i, err
}

const getUserCurrencyBalanceByType = `-- name: GetUserCurrencyBalanceByType :one
SELECT id, user_id, currency_type_id, balance
FROM "currency_balance"
WHERE user_id = $1 AND currency_type_id = $2
`

type GetUserCurrencyBalanceByTypeParams struct {
	UserID         int32
	CurrencyTypeID int32
}

func (q *Queries) GetUserCurrencyBalanceByType(ctx context.Context, arg GetUserCurrencyBalanceByTypeParams) (CurrencyBalance, error) {
	row := q.db.QueryRow(ctx, getUserCurrencyBalanceByType, arg.UserID, arg.CurrencyTypeID)
	var i CurrencyBalance
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CurrencyTypeID,
		&i.Balance,
	)
	return i, err
}

const listUserCurrencyBalances = `-- name: ListUserCurrencyBalances :many
SELECT id, user_id, currency_type_id, balance
FROM "currency_balance"
WHERE user_id = $1
`

func (q *Queries) ListUserCurrencyBalances(ctx context.Context, userID int32) ([]CurrencyBalance, error) {
	rows, err := q.db.Query(ctx, listUserCurrencyBalances, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CurrencyBalance
	for rows.Next() {
		var i CurrencyBalance
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CurrencyTypeID,
			&i.Balance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCurrencyBalance = `-- name: UpdateCurrencyBalance :one
UPDATE "currency_balance"
SET balance = $2
WHERE id = $1
RETURNING id, user_id, currency_type_id, balance
`

type UpdateCurrencyBalanceParams struct {
	ID      int32
	Balance int32
}

func (q *Queries) UpdateCurrencyBalance(ctx context.Context, arg UpdateCurrencyBalanceParams) (CurrencyBalance, error) {
	row := q.db.QueryRow(ctx, updateCurrencyBalance, arg.ID, arg.Balance)
	var i CurrencyBalance
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CurrencyTypeID,
		&i.Balance,
	)
	return i, err
}

const upsertUserCurrencyBalance = `-- name: UpsertUserCurrencyBalance :one
INSERT INTO "currency_balance" (user_id, currency_type_id, balance)
VALUES ($1, $2, $3)
ON CONFLICT (user_id, currency_type_id) DO UPDATE
SET balance = EXCLUDED.balance
RETURNING id, user_id, currency_type_id, balance
`

type UpsertUserCurrencyBalanceParams struct {
	UserID         int32
	CurrencyTypeID int32
	Balance        int32
}

func (q *Queries) UpsertUserCurrencyBalance(ctx context.Context, arg UpsertUserCurrencyBalanceParams) (CurrencyBalance, error) {
	row := q.db.QueryRow(ctx, upsertUserCurrencyBalance, arg.UserID, arg.CurrencyTypeID, arg.Balance)
	var i CurrencyBalance
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CurrencyTypeID,
		&i.Balance,
	)
	return i, err
}
