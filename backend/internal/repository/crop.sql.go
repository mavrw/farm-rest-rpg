// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: crop.sql

package repository

import (
	"context"
)

const createCrop = `-- name: CreateCrop :exec
INSERT INTO "crop" (name, growth_time_seconds, yield_amount)
VALUES ($1, $2, $3)
ON CONFLICT (id) DO NOTHING
`

type CreateCropParams struct {
	Name              string
	GrowthTimeSeconds int32
	YieldAmount       int32
}

func (q *Queries) CreateCrop(ctx context.Context, arg CreateCropParams) error {
	_, err := q.db.Exec(ctx, createCrop, arg.Name, arg.GrowthTimeSeconds, arg.YieldAmount)
	return err
}

const getAllCrops = `-- name: GetAllCrops :many
SELECT id, name, growth_time_seconds, yield_amount 
FROM "crop"
ORDER BY id
`

func (q *Queries) GetAllCrops(ctx context.Context) ([]Crop, error) {
	rows, err := q.db.Query(ctx, getAllCrops)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Crop
	for rows.Next() {
		var i Crop
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.GrowthTimeSeconds,
			&i.YieldAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCropByID = `-- name: GetCropByID :one
SELECT id, name, growth_time_seconds, yield_amount
FROM "crop"
WHERE id = $1
`

func (q *Queries) GetCropByID(ctx context.Context, id int32) (Crop, error) {
	row := q.db.QueryRow(ctx, getCropByID, id)
	var i Crop
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GrowthTimeSeconds,
		&i.YieldAmount,
	)
	return i, err
}
