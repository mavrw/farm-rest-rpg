// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: market_listing.sql

package repository

import (
	"context"
)

const createMarketListing = `-- name: CreateMarketListing :one
INSERT INTO "market_listing" (item_id, buy_price, sell_price)
VALUES ($1, $2, $3)
RETURNING item_id, buy_price, sell_price
`

type CreateMarketListingParams struct {
	ItemID    int32
	BuyPrice  *int32
	SellPrice *int32
}

func (q *Queries) CreateMarketListing(ctx context.Context, arg CreateMarketListingParams) (MarketListing, error) {
	row := q.db.QueryRow(ctx, createMarketListing, arg.ItemID, arg.BuyPrice, arg.SellPrice)
	var i MarketListing
	err := row.Scan(&i.ItemID, &i.BuyPrice, &i.SellPrice)
	return i, err
}

const deleteMarketListing = `-- name: DeleteMarketListing :exec
DELETE FROM "market_listing"
WHERE item_id = $1
`

func (q *Queries) DeleteMarketListing(ctx context.Context, itemID int32) error {
	_, err := q.db.Exec(ctx, deleteMarketListing, itemID)
	return err
}

const getMarketListing = `-- name: GetMarketListing :one
SELECT item_id, buy_price, sell_price
FROM "market_listing"
WHERE item_id = $1
`

func (q *Queries) GetMarketListing(ctx context.Context, itemID int32) (MarketListing, error) {
	row := q.db.QueryRow(ctx, getMarketListing, itemID)
	var i MarketListing
	err := row.Scan(&i.ItemID, &i.BuyPrice, &i.SellPrice)
	return i, err
}

const getMarketListingBuyPrice = `-- name: GetMarketListingBuyPrice :one

SELECT buy_price
FROM "market_listing"
WHERE item_id = $1
`

// TODO: Add pagination?
func (q *Queries) GetMarketListingBuyPrice(ctx context.Context, itemID int32) (*int32, error) {
	row := q.db.QueryRow(ctx, getMarketListingBuyPrice, itemID)
	var buy_price *int32
	err := row.Scan(&buy_price)
	return buy_price, err
}

const getMarketListingSellPrice = `-- name: GetMarketListingSellPrice :one
SELECT sell_price
FROM "market_listing"
WHERE item_id = $1
`

func (q *Queries) GetMarketListingSellPrice(ctx context.Context, itemID int32) (*int32, error) {
	row := q.db.QueryRow(ctx, getMarketListingSellPrice, itemID)
	var sell_price *int32
	err := row.Scan(&sell_price)
	return sell_price, err
}

const listMarketListings = `-- name: ListMarketListings :many
SELECT item_id, buy_price, sell_price
FROM "market_listing"
ORDER BY item_id
`

func (q *Queries) ListMarketListings(ctx context.Context) ([]MarketListing, error) {
	rows, err := q.db.Query(ctx, listMarketListings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MarketListing
	for rows.Next() {
		var i MarketListing
		if err := rows.Scan(&i.ItemID, &i.BuyPrice, &i.SellPrice); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const marketListingExists = `-- name: MarketListingExists :one
SELECT EXISTS (
    SELECT 1
    FROM "market_listing"
    WHERE item_id = $1
) AS exists
`

func (q *Queries) MarketListingExists(ctx context.Context, itemID int32) (bool, error) {
	row := q.db.QueryRow(ctx, marketListingExists, itemID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateMarketListing = `-- name: UpdateMarketListing :one
UPDATE "market_listing"
SET buy_price = $2,
    sell_price = $3
WHERE item_id = $1
RETURNING item_id, buy_price, sell_price
`

type UpdateMarketListingParams struct {
	ItemID    int32
	BuyPrice  *int32
	SellPrice *int32
}

func (q *Queries) UpdateMarketListing(ctx context.Context, arg UpdateMarketListingParams) (MarketListing, error) {
	row := q.db.QueryRow(ctx, updateMarketListing, arg.ItemID, arg.BuyPrice, arg.SellPrice)
	var i MarketListing
	err := row.Scan(&i.ItemID, &i.BuyPrice, &i.SellPrice)
	return i, err
}
