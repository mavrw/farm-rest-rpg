// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: item.sql

package repository

import (
	"context"
)

const createItemDefinition = `-- name: CreateItemDefinition :one
INSERT INTO "item" (
    id, 
    name, 
    description,
    rarity,
    type, 
    effect_json
)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (id) DO NOTHING
RETURNING id, name, description, rarity, type, effect_json
`

type CreateItemDefinitionParams struct {
	ID          int32
	Name        string
	Description string
	Rarity      ItemRarity
	Type        int32
	EffectJson  []byte
}

func (q *Queries) CreateItemDefinition(ctx context.Context, arg CreateItemDefinitionParams) (Item, error) {
	row := q.db.QueryRow(ctx, createItemDefinition,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Rarity,
		arg.Type,
		arg.EffectJson,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Rarity,
		&i.Type,
		&i.EffectJson,
	)
	return i, err
}

const getItemDefinition = `-- name: GetItemDefinition :one
SELECT id, name, description, rarity, type, effect_json
FROM "item"
WHERE id = $1
`

func (q *Queries) GetItemDefinition(ctx context.Context, id int32) (Item, error) {
	row := q.db.QueryRow(ctx, getItemDefinition, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Rarity,
		&i.Type,
		&i.EffectJson,
	)
	return i, err
}

const getItemDefinitionByName = `-- name: GetItemDefinitionByName :one
SELECT id, name, description, rarity, type, effect_json
FROM "item"
WHERE name = $1
`

func (q *Queries) GetItemDefinitionByName(ctx context.Context, name string) (Item, error) {
	row := q.db.QueryRow(ctx, getItemDefinitionByName, name)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Rarity,
		&i.Type,
		&i.EffectJson,
	)
	return i, err
}

const listItemDefinitions = `-- name: ListItemDefinitions :many
SELECT id, name, description, rarity, type, effect_json
FROM "item"
ORDER BY id
`

func (q *Queries) ListItemDefinitions(ctx context.Context) ([]Item, error) {
	rows, err := q.db.Query(ctx, listItemDefinitions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Rarity,
			&i.Type,
			&i.EffectJson,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
