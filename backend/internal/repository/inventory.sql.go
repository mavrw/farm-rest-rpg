// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: inventory.sql

package repository

import (
	"context"
)

const addItem = `-- name: AddItem :one
INSERT INTO "inventory" (user_id, item_id, quantity)
VALUES ($1, $2, $3)
ON CONFLICT (user_id, item_id) DO NOTHING
RETURNING id, user_id, item_id, quantity
`

type AddItemParams struct {
	UserID   int32
	ItemID   int32
	Quantity int32
}

func (q *Queries) AddItem(ctx context.Context, arg AddItemParams) (Inventory, error) {
	row := q.db.QueryRow(ctx, addItem, arg.UserID, arg.ItemID, arg.Quantity)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ItemID,
		&i.Quantity,
	)
	return i, err
}

const getItem = `-- name: GetItem :one
SELECT id, user_id, item_id, quantity
FROM "inventory"
WHERE user_id = $1 AND item_id = $2
`

type GetItemParams struct {
	UserID int32
	ItemID int32
}

func (q *Queries) GetItem(ctx context.Context, arg GetItemParams) (Inventory, error) {
	row := q.db.QueryRow(ctx, getItem, arg.UserID, arg.ItemID)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ItemID,
		&i.Quantity,
	)
	return i, err
}

const hasItemQuantity = `-- name: HasItemQuantity :one
SELECT quantity >= $3 AS has_enough
FROM "inventory"
WHERE user_id = $1 AND item_id = $2
`

type HasItemQuantityParams struct {
	UserID   int32
	ItemID   int32
	Quantity int32
}

func (q *Queries) HasItemQuantity(ctx context.Context, arg HasItemQuantityParams) (bool, error) {
	row := q.db.QueryRow(ctx, hasItemQuantity, arg.UserID, arg.ItemID, arg.Quantity)
	var has_enough bool
	err := row.Scan(&has_enough)
	return has_enough, err
}

const listItems = `-- name: ListItems :many
SELECT id, user_id, item_id, quantity
FROM "inventory"
WHERE user_id = $1
`

func (q *Queries) ListItems(ctx context.Context, userID int32) ([]Inventory, error) {
	rows, err := q.db.Query(ctx, listItems, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Inventory
	for rows.Next() {
		var i Inventory
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ItemID,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeItem = `-- name: RemoveItem :exec
DELETE FROM "inventory"
WHERE item_id = $2 AND user_id = $1
`

type RemoveItemParams struct {
	UserID int32
	ItemID int32
}

func (q *Queries) RemoveItem(ctx context.Context, arg RemoveItemParams) error {
	_, err := q.db.Exec(ctx, removeItem, arg.UserID, arg.ItemID)
	return err
}

const setItemQuantity = `-- name: SetItemQuantity :one
INSERT INTO "inventory" (user_id, item_id, quantity)
VALUES ($1, $2, $3)
ON CONFLICT (user_id, item_id) DO UPDATE
SET quantity = EXCLUDED.quantity
RETURNING id, user_id, item_id, quantity
`

type SetItemQuantityParams struct {
	UserID   int32
	ItemID   int32
	Quantity int32
}

func (q *Queries) SetItemQuantity(ctx context.Context, arg SetItemQuantityParams) (Inventory, error) {
	row := q.db.QueryRow(ctx, setItemQuantity, arg.UserID, arg.ItemID, arg.Quantity)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ItemID,
		&i.Quantity,
	)
	return i, err
}

const updateItem = `-- name: UpdateItem :one
UPDATE "inventory"
SET user_id = $2,
    item_id = $3,
    quantity = $4
WHERE id = $1
RETURNING id, user_id, item_id, quantity
`

type UpdateItemParams struct {
	ID       int32
	UserID   int32
	ItemID   int32
	Quantity int32
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (Inventory, error) {
	row := q.db.QueryRow(ctx, updateItem,
		arg.ID,
		arg.UserID,
		arg.ItemID,
		arg.Quantity,
	)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ItemID,
		&i.Quantity,
	)
	return i, err
}
